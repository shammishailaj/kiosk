/*
Copyright 2020 DevSpace Technologies Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/kiosk-sh/kiosk/pkg/apis/config/v1alpha1"
	scheme "github.com/kiosk-sh/kiosk/pkg/client/clientset_generated/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AccountQuotasGetter has a method to return a AccountQuotaInterface.
// A group's client should implement this interface.
type AccountQuotasGetter interface {
	AccountQuotas() AccountQuotaInterface
}

// AccountQuotaInterface has methods to work with AccountQuota resources.
type AccountQuotaInterface interface {
	Create(*v1alpha1.AccountQuota) (*v1alpha1.AccountQuota, error)
	Update(*v1alpha1.AccountQuota) (*v1alpha1.AccountQuota, error)
	UpdateStatus(*v1alpha1.AccountQuota) (*v1alpha1.AccountQuota, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AccountQuota, error)
	List(opts v1.ListOptions) (*v1alpha1.AccountQuotaList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AccountQuota, err error)
	AccountQuotaExpansion
}

// accountQuotas implements AccountQuotaInterface
type accountQuotas struct {
	client rest.Interface
}

// newAccountQuotas returns a AccountQuotas
func newAccountQuotas(c *ConfigV1alpha1Client) *accountQuotas {
	return &accountQuotas{
		client: c.RESTClient(),
	}
}

// Get takes name of the accountQuota, and returns the corresponding accountQuota object, and an error if there is any.
func (c *accountQuotas) Get(name string, options v1.GetOptions) (result *v1alpha1.AccountQuota, err error) {
	result = &v1alpha1.AccountQuota{}
	err = c.client.Get().
		Resource("accountquotas").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AccountQuotas that match those selectors.
func (c *accountQuotas) List(opts v1.ListOptions) (result *v1alpha1.AccountQuotaList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.AccountQuotaList{}
	err = c.client.Get().
		Resource("accountquotas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested accountQuotas.
func (c *accountQuotas) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("accountquotas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a accountQuota and creates it.  Returns the server's representation of the accountQuota, and an error, if there is any.
func (c *accountQuotas) Create(accountQuota *v1alpha1.AccountQuota) (result *v1alpha1.AccountQuota, err error) {
	result = &v1alpha1.AccountQuota{}
	err = c.client.Post().
		Resource("accountquotas").
		Body(accountQuota).
		Do().
		Into(result)
	return
}

// Update takes the representation of a accountQuota and updates it. Returns the server's representation of the accountQuota, and an error, if there is any.
func (c *accountQuotas) Update(accountQuota *v1alpha1.AccountQuota) (result *v1alpha1.AccountQuota, err error) {
	result = &v1alpha1.AccountQuota{}
	err = c.client.Put().
		Resource("accountquotas").
		Name(accountQuota.Name).
		Body(accountQuota).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *accountQuotas) UpdateStatus(accountQuota *v1alpha1.AccountQuota) (result *v1alpha1.AccountQuota, err error) {
	result = &v1alpha1.AccountQuota{}
	err = c.client.Put().
		Resource("accountquotas").
		Name(accountQuota.Name).
		SubResource("status").
		Body(accountQuota).
		Do().
		Into(result)
	return
}

// Delete takes name of the accountQuota and deletes it. Returns an error if one occurs.
func (c *accountQuotas) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("accountquotas").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *accountQuotas) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("accountquotas").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched accountQuota.
func (c *accountQuotas) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AccountQuota, err error) {
	result = &v1alpha1.AccountQuota{}
	err = c.client.Patch(pt).
		Resource("accountquotas").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
